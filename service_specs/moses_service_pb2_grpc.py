# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from service_specs import moses_service_pb2 as service__specs_dot_moses__service__pb2


class MosesServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartAnalysis = channel.stream_unary(
        '/MosesService/StartAnalysis',
        request_serializer=service__specs_dot_moses__service__pb2.AnalysisParameters.SerializeToString,
        response_deserializer=service__specs_dot_moses__service__pb2.Result.FromString,
        )


class MosesServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StartAnalysis(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MosesServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartAnalysis': grpc.stream_unary_rpc_method_handler(
          servicer.StartAnalysis,
          request_deserializer=service__specs_dot_moses__service__pb2.AnalysisParameters.FromString,
          response_serializer=service__specs_dot_moses__service__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MosesService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
